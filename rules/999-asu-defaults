#!/bin/sh
# /rom/etc/uci-defaults/
# built.in -> package/base-files/files/etc/uci-defaults/
echo -e "# net.ipv4.conf.default.arp_announce = 1\nnet.ipv4.route.max_size = 32\nnet.ipv6.route.max_size = 32" > /etc/sysctl.conf
echo "umask 066" > /root/.profile

fi4f='i41m'
fi6f='i61m'
fimf='m1m'
ff4f='i42m'
ff6f='i62m'
ffmf='m2m'
mi4m='i43m'
mi6m='i63m'
mim='m3m'
mf4m='i44m'
mf6m='i64m'
mfm='m4m'
tables='fw4' # local 'filter'
f1f='/etc/nftables.d/f1f'
e1e='/etc/nftables.d/e1e'
m1m='/etc/nftables.d/m1m'
f2f='/etc/nftables.d/f2f'
e2e='/etc/nftables.d/e2e'
m2m='/etc/nftables.d/m2m'
f3f='/etc/nftables.d/f3f'
e3e='/etc/nftables.d/e3e'
m3m='/etc/nftables.d/m3m'
f4f='/etc/nftables.d/f4f'
e4e='/etc/nftables.d/e4e'
m4m='/etc/nftables.d/m4m'
cat > /root/nft.init.0 << EXO
#!/bin/sh
set -e
set -o pipefail
case "\$1" in
	i4 )
		nft add element inet ${tables} ${fi4f} {"\$2"}
		;;
	i6 )
		nft add element inet ${tables} ${fi6f} {"\$2"}
		;;
	im )
		nft add element inet ${tables} ${fimf} {"\$2"}
		;;
	i4d )
		nft delete element inet ${tables} ${fi4f} {"\$2"}
		;;
	i6d )
		nft delete element inet ${tables} ${fi6f} {"\$2"}
		;;
	imd )
		nft delete element inet ${tables} ${fimf} {"\$2"}
		;;
	f4 )
		nft add element inet ${tables} ${ff4f} {"\$2"}
		;;
	f6 )
		nft add element inet ${tables} ${ff6f} {"\$2"}
		;;
	fm )
		nft add element inet ${tables} ${ffmf} {"\$2"}
		;;
	f4d )
		nft delete element inet ${tables} ${ff4f} {"\$2"}
		;;
	f6d )
		nft delete element inet ${tables} ${ff6f} {"\$2"}
		;;
	fmd )
		nft delete element inet ${tables} ${ffmf} {"\$2"}
		;;
	i4s )
		nft list set inet ${tables} ${fi4f} | sed '1d;\$d' > ${f1f}
		;;
	i6s )
		nft list set inet ${tables} ${fi6f} | sed '1d;\$d' > ${e1e}
		;;
	ims )
		nft list set inet ${tables} ${fimf} | sed '1d;\$d' > ${m1m}
		;;
	f4s )
		nft list set inet ${tables} ${ff4f} | sed '1d;\$d' > ${f2f}
		;;
	f6s )
		nft list set inet ${tables} ${ff6f} | sed '1d;\$d' > ${e2e}
		;;
	fms )
		nft list set inet ${tables} ${ffmf} | sed '1d;\$d' > ${m2m}
		;;
esac
EXO

st2=$(dd if=/dev/urandom bs=1 count=1|hexdump -e '1 "%03x"')
st4=$(dd if=/dev/urandom bs=2 count=1|hexdump -e '1 "%04x"')
uci batch << EEOO
set network.globals.packet_steering='0'
set dhcp.odhcpd.loglevel='1' #4

set firewall.@rule[0].enabled='0'
set firewall.@rule[1].enabled='0'
set firewall.@rule[2].enabled='0'
set firewall.@rule[3].enabled='1'
set firewall.@rule[4].enabled='0'
set firewall.@rule[5].enabled='0'
set firewall.@rule[6].enabled='0'
set firewall.@rule[7].enabled='0'
set firewall.@rule[8].enabled='0'

set firewall.@defaults[0].synflood_protect='1'
set firewall.@defaults[0].flow_offloading='1'
set firewall.@defaults[0].flow_offloading_hw='1'
add_list firewall.@zone[1].network='wwan'

set firewall.@defaults[0].input='DROP'
set firewall.@defaults[0].forward='DROP'
set firewall.@zone[1].input='DROP'
set firewall.@zone[1].forward='DROP'

set system.@system[0].hostname="$st2"
set system.@system[0].timezone='HKT-8'
set system.@system[0].log_size='64'
set system.@system[0].zonename='Asia/Hong Kong'
set system.ntp.enable_server='0'
set system.ntp.interface='lan'

set dropbear.main.Port="$((65431+$RANDOM%2))"
set dropbear.main.MaxAuthTries='2'
set dropbear.main.DirectInterface='lan'
set network.lan.ipaddr="172.$((16+$RANDOM%16)).$((RANDOM%255)).1"

set dhcp.@dnsmasq[0].cachesize='100'
set dhcp.@dnsmasq[0].interface='lan'
add_list dhcp.lan.dhcp_option='6,114.114.114.114'
set dhcp.wwan=dhcp
set dhcp.wwan.interface='wwan'
set dhcp.wwan.ignore='1'
set network.wwan=interface
set network.wwan.proto='dhcp'

set wireless.radio0.country='CN'
set wireless.radio1.country='CN'

set wireless.default_radio0.ssid="xiaomi-$st4"
set wireless.default_radio0.encryption='psk2'
set wireless.default_radio0.key='12345678'

set wireless.default_radio1.ssid="redmi-$st4"
set wireless.default_radio1.encryption='psk2'
set wireless.default_radio1.key='12345678'

set wireless.radionet0=$(uci get wireless.radio0)
set wireless.radionet0.type=$(uci get wireless.radio0.type)
set wireless.radionet0.path=$(uci get wireless.radio0.path)
set wireless.radionet0.band=$(uci get wireless.radio0.band)
set wireless.radionet0.country='CN'
set wireless.radionet0.disabled='1'

set wireless.wifinet0=wifi-iface
set wireless.wifinet0.device='radionet0'
set wireless.wifinet0.mode='sta'
set wireless.wifinet0.network='wwan'
set wireless.wifinet0.ssid='Openwrt'
set wireless.wifinet0.bssid='00:00:00:00:02:01'
set wireless.wifinet0.encryption='psk2' # none sae
set wireless.wifinet0.key='12345678'
set wireless.wifinet0.disabled='1'

set wireless.radionet1=$(uci get wireless.radio1)
set wireless.radionet1.type=$(uci get wireless.radio1.type)
set wireless.radionet1.path=$(uci get wireless.radio1.path)
set wireless.radionet1.band=$(uci get wireless.radio1.band)
set wireless.radionet1.country='CN'
set wireless.radionet1.disabled='1'

set wireless.wifinet1=wifi-iface
set wireless.wifinet1.device='radionet1'
set wireless.wifinet1.mode='sta'
set wireless.wifinet1.network='wwan'
set wireless.wifinet1.ssid='Openwrt'
set wireless.wifinet1.bssid='00:00:00:00:02:01'
set wireless.wifinet1.encryption='psk2'
set wireless.wifinet1.key='12345678'
set wireless.wifinet1.disabled='1'
commit
EEOO

[[ $(uci get wireless.radio0.channel) = '1' ]] && {
	uci set wireless.radio0.channel=$((5+$RANDOM%5))
	uci set wireless.radio1.channel=$((153+$RANDOM%3*4))
	uci set wireless.radio1.disabled='0'
	uci set wireless.default_radio1.disabled='0'
	uci commit
}
[[ $(uci get wireless.radio1.channel) = '1' ]] && {
	uci set wireless.radio1.channel=5
	uci set wireless.radio0.channel=153
	uci set wireless.radio0.disabled='0'
	uci set wireless.default_radio0.disabled='0'
	uci commit
}

touch /etc/dropbear/authorized_keys
pd="openwrt-$(uci get network.lan.ipaddr)"
(echo $pd;sleep 1;echo $pd) | passwd > /dev/null
unset pd st2 st4

for i in $(seq 4);do
	echo -e "set i4${i}m {\n\ttype ipv4_addr\n\tflags interval\n}" > /etc/nftables.d/"f${i}f"
	echo -e "set i6${i}m {\n\ttype ipv6_addr\n\tflags interval\n}" > /etc/nftables.d/"e${i}e"
	echo -e "set m${i}m {\n\ttype ether_addr\n\tflags interval\n}" > /etc/nftables.d/"m${i}m"
done
cat > /etc/nftables.d/10-custom-filter-chains.nft << NFTC
## The firewall4 input, forward and output chains are registered with
## priority filter (0).

## Uncomment the chains below if you want to stage rules *before* the
## default firewall input, forward and output chains.
include "${f1f}"
include "${f2f}"
include "${f3f}"
include "${f4f}"
include "${e1e}"
include "${e2e}"
include "${e3e}"
include "${e4e}"
include "${m1m}"
include "${m2m}"
include "${m3m}"
include "${m4m}"
chain user_pre_input {
	type filter hook input priority -1; policy accept;
	ip saddr @${mi4m} drop
	ip6 saddr @${mi6m} drop
	ether saddr @${mim} drop
#	ip saddr 192.168.0.2 tcp dport { 80, 443 } drop
}

chain user_pre_forward {
	type filter hook forward priority -1; policy accept;
	ip daddr @${mf4m} drop
	ip6 daddr @${mf6m} drop
	ether saddr @${mfm} drop
#	ip daddr 192.168.0.2 tcp dport { 80, 443 } drop comment "drop ct state all"
}

# chain user_pre_output {
#	type filter hook output priority -1; policy accept;
# }

## Uncomment the chains below if you want to stage rules *after* the
## default firewall input, forward and output chains.

chain user_post_input {
	type filter hook input priority 1; policy accept;
	ip saddr @${fi4f} drop comment "drop ct state all"
	ip6 saddr @${fi6f} drop
	ether saddr @${fimf} drop comment "drop to LAN"
#	ip saddr 192.168.0.2 tcp dport { 80, 443 } drop comment "drop to LAN"
}

chain user_post_forward {
	type filter hook forward priority 1; policy accept;
	ip daddr @${ff4f} drop comment "drop ct state new"
	ip6 daddr @${ff6f} drop
	ether saddr @${ffmf} drop comment "drop network"
#	ip daddr 192.168.0.2 tcp dport { 80, 443 } drop comment "drop ct state new"
}

# chain user_post_output {
#	type filter hook output priority 1; policy accept;
# }

chain user_dstnat {
	type nat hook prerouting priority dstnat; policy accept;
#	iifname "br-lan" ip daddr {192.168.1.2} tcp dport {80,443} dnat to $(uci get network.lan.ipaddr)
}

# chain user_srcnat {
#	type nat hook postrouting priority srcnat; policy accept;
#	oifname "lan" ip saddr 192.168.1.0/24 snat to xxx
#	oifname "lan" ip saddr 192.168.1.0/24 masquerade
# }
NFTC
exit 0 
