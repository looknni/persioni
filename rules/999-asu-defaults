#!/bin/sh
# /rom/etc/uci-defaults/
# built.in -> package/base-files/files/etc/uci-defaults/
echo -e "# net.ipv4.conf.default.arp_announce = 1\nnet.ipv4.route.max_size = 32\nnet.ipv6.route.max_size = 32" > /etc/sysctl.conf
echo "umask 066" > /root/.profile

i41p='i41p'
i61p='i61p'
m1m='m1m'
i42p='i42p'
i62p='i62p'
m2m='m2m'
tables='fw4'
cat > /root/nft.init.0 << EXO
#!/bin/sh
set -e
set -o pipefail
case "\$1" in
	i4 )
		nft add element inet ${tables} ${i41p} {"\$2"}
		;;
	i6 )
		nft add element inet ${tables} ${i61p} {"\$2"}
		;;
	im )
		nft add element inet ${tables} ${m1m} {"\$2"}
		;;
	i4d )
		nft delete element inet ${tables} ${i41p} {"\$2"}
		;;
	i6d )
		nft delete element inet ${tables} ${i61p} {"\$2"}
		;;
	imd )
		nft delete element inet ${tables} ${m1m} {"\$2"}
		;;
	f4 )
		nft add element inet ${tables} ${i42p} {"\$2"}
		;;
	f6 )
		nft add element inet ${tables} ${i62p} {"\$2"}
		;;
	fm )
		nft add element inet ${tables} ${m2m} {"\$2"}
		;;
	f4d )
		nft delete element inet ${tables} ${i42p} {"\$2"}
		;;
	f6d )
		nft delete element inet ${tables} ${i62p} {"\$2"}
		;;
	fmd )
		nft delete element inet ${tables} ${m2m} {"\$2"}
		;;
	is )
		nft list set inet ${tables} ${i41p} | sed '1d;\$d' > /etc/nftables.d/i41p
		nft list set inet ${tables} ${i61p} | sed '1d;\$d' > /etc/nftables.d/i61p
		nft list set inet ${tables} ${m1m} | sed '1d;\$d' > /etc/nftables.d/m1m
		;;
	fs )
		nft list set inet ${tables} ${i42p} | sed '1d;\$d' > /etc/nftables.d/i42p
		nft list set inet ${tables} ${i62p} | sed '1d;\$d' > /etc/nftables.d/i62p
		nft list set inet ${tables} ${m2m} | sed '1d;\$d' > /etc/nftables.d/m2m
		;;
esac
EXO

st2=$(dd if=/dev/urandom bs=1 count=1|hexdump -e '1 "%03x"')
st4=$(dd if=/dev/urandom bs=2 count=1|hexdump -e '1 "%04x"')
uci batch << EEOO
set network.globals.packet_steering='0'
set dhcp.odhcpd.loglevel='1' #4

delete firewall.@rule[8]
delete firewall.@rule[7]
delete firewall.@rule[6]
delete firewall.@rule[5]
delete firewall.@rule[4]
delete firewall.@rule[0]
delete firewall.@rule[0]
delete firewall.@rule[0]

set firewall.@defaults[0].synflood_protect='1'
set firewall.@defaults[0].flow_offloading='1'
set firewall.@defaults[0].flow_offloading_hw='1'
add_list firewall.@zone[1].network='wwan'

set firewall.@defaults[0].input='DROP'
set firewall.@defaults[0].output='DROP'
set firewall.@defaults[0].forward='DROP'
set firewall.@zone[1].input='DROP'
set firewall.@zone[1].forward='DROP'

set system.@system[0].hostname="$st2"
set system.@system[0].timezone='HKT-8'
set system.@system[0].zonename='Asia/Hong Kong'
set system.ntp.enable_server='0'
set system.ntp.interface='lan'

set dropbear.main.Port="$((65431+$RANDOM%2))"
set dropbear.main.MaxAuthTries='2'
set dropbear.main.DirectInterface='lan'
set network.lan.ipaddr="172.$((16+$RANDOM%16)).$((RANDOM%255)).1"

set dhcp.@dnsmasq[0].cachesize='100'
set dhcp.@dnsmasq[0].interface='lan'
add_list dhcp.lan.dhcp_option='6,114.114.114.114'
set dhcp.wwan=dhcp
set dhcp.wwan.interface='wwan'
set dhcp.wwan.ignore='1'
set network.wwan=interface
set network.wwan.proto='dhcp'

set wireless.radio0.country='CN'
set wireless.radio1.country='CN'

set wireless.default_radio0.ssid="xiaomi-$st4"
set wireless.default_radio0.encryption='psk2'
set wireless.default_radio0.key='12345678'

set wireless.default_radio1.ssid="redmi-$st4"
set wireless.default_radio1.encryption='psk2'
set wireless.default_radio1.key='12345678'

set wireless.r0n=$(uci get wireless.radio0)
set wireless.r0n.type=$(uci get wireless.radio0.type)
set wireless.r0n.path=$(uci get wireless.radio0.path)
set wireless.r0n.band=$(uci get wireless.radio0.band)
set wireless.r0n.country='CN'
set wireless.r0n.disabled='1'

set wireless.w0n=wifi-iface
set wireless.w0n.device='r0n'
set wireless.w0n.mode='sta'
set wireless.w0n.network='wwan'
set wireless.w0n.ssid='Openwrt'
set wireless.w0n.bssid='00:00:00:00:02:01'
set wireless.w0n.encryption='psk2' # none sae
set wireless.w0n.key='12345678'
set wireless.w0n.disabled='1'

set wireless.r1n=$(uci get wireless.radio1)
set wireless.r1n.type=$(uci get wireless.radio1.type)
set wireless.r1n.path=$(uci get wireless.radio1.path)
set wireless.r1n.band=$(uci get wireless.radio1.band)
set wireless.r1n.country='CN'
set wireless.r1n.disabled='1'

set wireless.w1n=wifi-iface
set wireless.w1n.device='r1n'
set wireless.w1n.mode='sta'
set wireless.w1n.network='wwan'
set wireless.w1n.ssid='Openwrt'
set wireless.w1n.bssid='00:00:00:00:02:01'
set wireless.w1n.encryption='psk2'
set wireless.w1n.key='12345678'
set wireless.w1n.disabled='1'
commit
EEOO

[[ $(uci get wireless.radio0.channel) = '1' ]] && {
	uci set wireless.radio0.channel=$((5+$RANDOM%5))
	uci set wireless.radio1.channel=$((153+$RANDOM%3*4))
	uci set wireless.radio1.disabled='0'
	uci set wireless.default_radio1.disabled='0'
	uci commit
}
[[ $(uci get wireless.radio1.channel) = '1' ]] && {
	uci set wireless.radio1.channel=5
	uci set wireless.radio0.channel=153
	uci set wireless.radio0.disabled='0'
	uci set wireless.default_radio0.disabled='0'
	uci commit
}

touch /etc/dropbear/authorized_keys
pd="openwrt-$(uci get network.lan.ipaddr)"
(echo $pd;sleep 1;echo $pd) | passwd > /dev/null
unset pd st2 st4

for i in $(seq 2);do
	echo -e "set i4${i}p {\n\ttype ipv4_addr\n\tflags interval\n}" > /etc/nftables.d/"i4${i}p"
	echo -e "set i6${i}p {\n\ttype ipv6_addr\n\tflags interval\n}" > /etc/nftables.d/"i6${i}p"
	echo -e "set m${i}m {\n\ttype ether_addr\n\tflags interval\n}" > /etc/nftables.d/"m${i}m"
done
echo -e "set d2p {\n\ttype ipv4_addr\n\tflags interval\n\telements = { 192.168.0.3 }\n}" > /etc/nftables.d/"d2p"
echo -e "set d2d {\n\ttype inet_service\n\tflags interval\n\telements = { 22,80,443 }\n}" > /etc/nftables.d/"d2d"
cat > /etc/nftables.d/10-custom-filter-chains.nft << NFTC
include "/etc/nftables.d/i41p"
include "/etc/nftables.d/i61p"
include "/etc/nftables.d/i42p"
include "/etc/nftables.d/i62p"
include "/etc/nftables.d/m1m"
include "/etc/nftables.d/m2m"
include "/etc/nftables.d/d2p"
include "/etc/nftables.d/d2d"
chain user_pre_input {
	type filter hook input priority -1; policy accept;
	ip saddr @${i41p} drop
	ip6 saddr @${i61p} drop
#	ether saddr != @${m1m} tcp dport 23 drop comment "drop to LAN SSH"
}

chain user_pre_forward {
	type filter hook forward priority -1; policy accept;
	ip daddr @${i42p} drop comment "drop ct state all"
	ip6 daddr @${i62p} drop
#	ether saddr @${m2m} drop comment "drop to LAN NETWORK"
#	ip daddr @d2p tcp dport @d2d limit rate 5/second burst 10 packets log prefix "d2p" drop comment "drop ct state all"
}

# chain user_pre_output {
#	type filter hook output priority -1; policy accept;
# }

chain user_dstnat {
	type nat hook prerouting priority dstnat; policy accept;
#	iifname "br-lan" ip daddr {192.168.1.2} tcp dport {80,443} dnat to $(uci get network.lan.ipaddr)
}

# chain user_srcnat {
#	type nat hook postrouting priority srcnat; policy accept;
#	oifname "lan" ip saddr 192.168.1.0/24 snat to xxx
#	oifname "lan" ip saddr 192.168.1.0/24 masquerade
# }
NFTC
sed -i -e 's/\<default_radio0\>/d0r/g' -e 's/\<default_radio1\>/d1r/g' -e 's/\<radio0\>/c0r/g' -e 's/\<radio1\>/c1r/g' /etc/config/wireless
chmod -R g-rwx,o-rwx /etc/config/ /etc/nftables.d/ /root/
exit 0 
