#!/bin/sh
# /rom/etc/uci-defaults/
# build.in -> package/base-files/files/etc/uci-defaults/
cat > /etc/sysctl.conf << 'ARP'
# net.ipv4.conf.default.arp_announce = 1
net.ipv4.route.max_size = 32
net.ipv6.route.max_size = 32
ARP
cat > /root/nft.init.0 << 'EXO'
#!/bin/sh
	mdd='mccset' # local 'fccset'
	m6dd='mcc6set'
	mddm='mccm'
	mangle='fw4' # local 'filter'
	anft="/etc/nftables.d/m4ip"
	bnft="/etc/nftables.d/m6ip"
	cnft="/etc/nftables.d/mmac"
	set -e
	set -o pipefail
function list(){
	nft list set inet $1 $2 | sed '1d;$d'
}
function add(){
	case "$1" in
		add )
			nft add element inet $mangle $mdd {"$2"}
			list $mangle $mdd > ${anft}
			cat ${anft}
			;;
		add6 )
			nft add element inet $mangle "${m6dd}" {"$2"}
			list $mangle "${m6dd}" > ${bnft}
			cat ${bnft}
			;;
		addm )
			nft add element inet $mangle $mddm { "$2" }
			list $mangle $mddm > ${cnft}
			cat ${cnft}
			;;
	esac
}
function del(){
	case "$1" in
		del )
			nft delete element inet $mangle $mdd {"$2"}
			list $mangle $mdd > ${anft}
			cat ${anft}
			;;
		del6 )
			nft delete element inet $mangle "${m6dd}" {"$2"}
			list $mangle "${m6dd}" > ${bnft}
			cat ${bnft}
			;;
		delm )
			nft delete element inet $mangle $mddm {"$2"}
			list $mangle $mddm > ${cnft}
			cat ${cnft}
			;;
	esac
}
case "$1" in
	add | add6 | addm )
		add $1 $2
		;;
	del | del6 | delm )
		del $1 $2
		;;
esac
unset mdd mddm mangle
EXO

st2=$(dd if=/dev/urandom bs=1 count=1|hexdump -e '1 "%03x"')
st4=$(dd if=/dev/urandom bs=2 count=1|hexdump -e '1 "%04x"')
uci batch << EEOO
delete network.globals.ula_prefix
delete network.wan6
delete dhcp.lan.ra_flags
delete dhcp.lan.ra_slaac
delete dhcp.lan.ra
set dhcp.@dnsmasq[0].filter_aaaa='1'
set dhcp.lan.dhcpv6='disabled'
set network.lan.ip6assign='0'

delete firewall.@rule[0]
delete firewall.@rule[0]
delete firewall.@rule[0]
delete firewall.@rule[0]
delete firewall.@rule[0]
delete firewall.@rule[0]
delete firewall.@rule[0]
delete firewall.@rule[0]
delete firewall.@rule[0]

set firewall.@defaults[0].synflood_protect='1'
set firewall.@defaults[0].flow_offloading='1'
set firewall.@defaults[0].flow_offloading_hw='1'
set firewall.@zone[1].network='wan wwan'

set firewall.@defaults[0].input='DROP'
set firewall.@defaults[0].forward='DROP'
set firewall.@zone[1].input='DROP'
set firewall.@zone[1].forward='DROP'

set system.@system[0].hostname="$st2"
set system.@system[0].timezone='HKT-8'
set system.@system[0].log_size='64'
set system.@system[0].zonename='Asia/Hong Kong'
set system.ntp.enable_server='0'
set system.ntp.interface='lan'

set dropbear.@dropbear[0].Port="$((65431+$RANDOM%2))"
set dropbear.@dropbear[0].MaxAuthTries='2'
set dropbear.@dropbear[0].Interface='lan'
set network.lan.ipaddr="172.$((16+$RANDOM%16)).$((RANDOM%255)).1"
set network.globals.packet_steering='0'

set dhcp.@dnsmasq[0].cachesize='100'
add_list dhcp.lan.dhcp_option='6,114.114.114.114'
set dhcp.wwan=dhcp
set dhcp.wwan.interface='wwan'
set dhcp.wwan.ignore='1'
set network.wwan=interface
set network.wwan.proto='dhcp'

set wireless.radio0.country='CN'
set wireless.radio1.country='CN'

set wireless.default_radio0.ssid="xiaomi-$st4"
set wireless.default_radio0.encryption='psk2'
set wireless.default_radio0.key='12345678'

set wireless.default_radio1.ssid="redmi-$st4"
set wireless.default_radio1.encryption='psk2'
set wireless.default_radio1.key='12345678'

set wireless.radionet0=$(uci get wireless.radio0)
set wireless.radionet0.type=$(uci get wireless.radio0.type)
set wireless.radionet0.path=$(uci get wireless.radio0.path)
set wireless.radionet0.band=$(uci get wireless.radio0.band)
set wireless.radionet0.country='CN'
set wireless.radionet0.disabled='1'

set wireless.wifinet0=wifi-iface
set wireless.wifinet0.device='radionet0'
set wireless.wifinet0.mode='sta'
set wireless.wifinet0.network='wwan'
set wireless.wifinet0.ssid='Openwrt'
set wireless.wifinet0.bssid='00:00:00:00:02:01'
set wireless.wifinet0.encryption='psk2' # none sae
set wireless.wifinet0.key='12345678'
set wireless.wifinet0.disabled='1'

set wireless.radionet1=$(uci get wireless.radio1)
set wireless.radionet1.type=$(uci get wireless.radio1.type)
set wireless.radionet1.path=$(uci get wireless.radio1.path)
set wireless.radionet1.band=$(uci get wireless.radio1.band)
set wireless.radionet1.country='CN'
set wireless.radionet1.disabled='1'

set wireless.wifinet1=wifi-iface
set wireless.wifinet1.device='radionet1'
set wireless.wifinet1.mode='sta'
set wireless.wifinet1.network='wwan'
set wireless.wifinet1.ssid='Openwrt'
set wireless.wifinet1.bssid='00:00:00:00:02:01'
set wireless.wifinet1.encryption='psk2'
set wireless.wifinet1.key='12345678'
set wireless.wifinet1.disabled='1'
commit
EEOO

[[ $(uci get wireless.radio0.channel) = '1' ]] && {
	uci set wireless.radio0.channel=$((5+$RANDOM%5))
	uci set wireless.radio1.channel=$((153+$RANDOM%3*4))
	uci set wireless.radio1.disabled='0'
	uci set wireless.default_radio1.disabled='0'
	uci commit
}
[[ $(uci get wireless.radio1.channel) = '1' ]] && {
	uci set wireless.radio1.channel=5
	uci set wireless.radio0.channel=153
	uci set wireless.radio0.disabled='0'
	uci set wireless.default_radio0.disabled='0'
	uci commit
}

touch /etc/dropbear/authorized_keys
/etc/init.d/odhcpd disable
pd="openwrt-$(uci get network.lan.ipaddr)"
(echo $pd;sleep 1;echo $pd) | passwd > /dev/null
unset pd st2 st4

anft="/etc/nftables.d/m4ip"
bnft="/etc/nftables.d/m6ip"
cnft="/etc/nftables.d/mmac"
cat > ${anft} << NFTA
set mccset {
	type ipv4_addr
	flags interval
}
NFTA
cat > ${bnft} << NFTB
set mcc6set {
	type ipv6_addr
	flags interval
}
NFTB
cat > ${cnft} << NFTM
set mccm {
	type ether_addr
	flags interval
}
NFTM
cat > /etc/nftables.d/10-custom-filter-chains.nft << NFTC
## The firewall4 input, forward and output chains are registered with
## priority filter (0).

## Uncomment the chains below if you want to stage rules *before* the
## default firewall input, forward and output chains.
include "${anft}"
include "${bnft}"
include "${cnft}"
# chain user_pre_input {
#	type filter hook input priority -1; policy accept;
# }

# chain user_pre_forward {
#	type filter hook forward priority -1; policy accept;
# }

# chain user_pre_output {
#	type filter hook output priority -1; policy accept;
# }

## Uncomment the chains below if you want to stage rules *after* the
## default firewall input, forward and output chains.

# chain user_post_input {
#	type filter hook input priority 1; policy accept;
# }

chain user_post_forward {
	type filter hook forward priority 1; policy accept;
	ip daddr @mccset drop
	ip6 daddr @mcc6set drop
	ether saddr @mccm drop
}

# chain user_post_output {
#	type filter hook output priority 1; policy accept;
# }

# chain user_dstnat {
#	type nat hook prerouting priority dstnat; policy accept;
#	iifname "br-lan" ip daddr {192.168.1.2} tcp dport {80,443} dnat to $(uci get network.lan.ipaddr)
# }

# chain user_srcnat {
#	type nat hook postrouting priority srcnat; policy accept;
#	oifname "lan" ip saddr 192.168.1.0/24 snat to xxx
#	oifname "lan" ip saddr 192.168.1.0/24 masquerade
# }
NFTC
unset anft bnft cnft
exit 0 
