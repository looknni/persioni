#!/bin/sh
# /rom/etc/uci-defaults/
# build.in -> package/base-files/files/etc/uci-defaults/
cat > /etc/sysctl.conf << 'ARP'
net.ipv4.conf.all.arp_ignore=1
net.ipv4.conf.lo.arp_ignore=1
net.ipv4.conf.all.arp_announce=2
net.ipv4.conf.lo.arp_announce=2
ARP
cat > /root/nft.init.0 << 'EXO'
#!/bin/sh
	mdd='mccset' # local 'fccset'
	mddm='mccm'
	mangle='fw4' # local 'filter'
function list(){
	nft list set inet $1 $2
}
function add(){
	case "$1" in
		add )
			nft add element inet $mangle $mdd {"$2"}
			list $mangle $mdd
			;;
		add6 )
			nft add element inet $mangle "${mdd}6" {"$2"}
			list $mangle "${mdd}6"
			;;
		addt )
			nft add element inet $mangle $mdd {"$2" timeout $3}
			list $mangle $mdd
			;;
		addm )
			nft add element inet $mangle $mddm { "$2" }
			list $mangle $mddm
			;;
		addmt )
			nft add element inet $mangle $mddm { "$2" timeout $3 }
			list $mangle $mddm
			;;
	esac
}
function del(){
	case "$1" in
		del )
			nft delete element inet $mangle $mdd {"$2"}
			list $mangle $mdd
			;;
		del6 )
			nft delete element inet $mangle "${mdd}6" {"$2"}
			list $mangle "${mdd}6"
			;;
		delm )
			nft delete element inet $mangle $mddm {"$2"}
			list $mangle $mddm
			;;
	esac
}
case "$1" in
	add | add6 )
		add $1 $2
		;;
	del | del6 )
		del $1 $2
		;;
	addm )
		add $1 $2
		;;
	addt |addmt )
		add $1 $2 $3
		;;
	delm )
		del $1 $2
		;;
esac
unset mdd mddm mangle
EXO

st2=$(dd if=/dev/urandom bs=1 count=1|hexdump -e '1 "%02x"')
st4=$(dd if=/dev/urandom bs=2 count=1|hexdump -e '1 "%02x"')
uci batch << EEOO
set firewall.@defaults[0].synflood_protect='1'
set firewall.@defaults[0].flow_offloading='1'
set firewall.@defaults[0].flow_offloading_hw='1'
# set firewall.@defaults[0].drop_invalid='1'
set firewall.@zone[1].network='wan wwan'

set firewall.@rule[0].enabled='0'
set firewall.@rule[1].enabled='0'
set firewall.@rule[2].enabled='0'
set firewall.@rule[3].enabled='0'
set firewall.@rule[4].enabled='0'
set firewall.@rule[5].enabled='0'
set firewall.@rule[6].enabled='0'
set firewall.@rule[7].enabled='0'
set firewall.@rule[8].enabled='0'

set system.@system[0].hostname="$st2"
set system.@system[0].timezone='HKT-8'
set system.@system[0].zonename='Asia/Hong Kong'
set system.@system[0].zram_comp_algo='lz4' # zstd
set system.ntp.enable_server='0'
set system.ntp.interface='lan'

set dropbear.@dropbear[0].Port="$((65430+$RANDOM%3))"
set dropbear.@dropbear[0].MaxAuthTries='2' #3
set dropbear.@dropbear[0].Interface='lan'
set network.lan.ipaddr="172.$((16+$RANDOM%16)).$((RANDOM%255)).1"
set network.globals.packet_steering='0'

set dhcp.@dnsmasq[0].cachesize='100'
set dhcp.@dnsmasq[0].filter_aaaa='1'
add_list dhcp.lan.dhcp_option='6,114.114.114.114'

set network.lan.ip6assign='64' #60 64 56 52 48
set network.wwan=interface
set network.wwan.proto='dhcp' # static < ipaddr netmask >

set wireless.radio0.country='CN'
set wireless.radio0.disabled='0'
set wireless.radio1.country='CN'
set wireless.radio1.disabled='0'

set wireless.default_radio0.ssid="xiaomi-$st4"
set wireless.default_radio0.encryption='psk2+ccmp'
set wireless.default_radio0.key='12345678'
set wireless.default_radio0.max_listen_int='1000' #65535 only.'ap'
set wireless.default_radio0.sae_pwe='1' #0 2
set wireless.default_radio0.wmm='1'
set wireless.default_radio0.disabled='1'

set wireless.default_radio1.ssid="redmi-$st4"
set wireless.default_radio1.encryption='psk2+ccmp'
set wireless.default_radio1.key='12345678'
set wireless.default_radio1.max_listen_int='1000'
set wireless.default_radio1.sae_pwe='1'
set wireless.default_radio1.wmm='1'
set wireless.default_radio1.disabled='0'

set wireless.wifinet0=wifi-iface
set wireless.wifinet0.device='radio0'
set wireless.wifinet0.mode='sta'
set wireless.wifinet0.network='wwan'
set wireless.wifinet0.ssid='Openwrt'
set wireless.wifinet0.bssid='00:00:00:00:02:01'
set wireless.wifinet0.encryption='psk-mixed+aes' # none sae
set wireless.wifinet0.key='12345678'
set wireless.wifinet0.disabled='1'

set wireless.wifinet1=wifi-iface
set wireless.wifinet1.device='radio1'
set wireless.wifinet1.mode='sta'
set wireless.wifinet1.network='wwan'
set wireless.wifinet1.ssid='Openwrt'
set wireless.wifinet1.bssid='00:00:00:00:02:01'
set wireless.wifinet1.encryption='psk-mixed+ccmp'
set wireless.wifinet1.key='12345678'
set wireless.wifinet1.disabled='1'
commit
EEOO
# sed -i 's_downloads.openwrt.org_mirrors.tuna.tsinghua.edu.cn/openwrt_' /etc/opkg/distfeeds.conf
# sed -i 's/downloads.openwrt.org/mirrors.ustc.edu.cn\/openwrt/g' /etc/opkg/distfeeds.conf
touch /etc/dropbear/authorized_keys
/etc/init.d/odhcpd disable
pd="openwrt-$(uci get network.lan.ipaddr)"
(echo $pd;sleep 1;echo $pd) | passwd > /dev/null
unset pd st2 st4

cat > /etc/nftables.d/10-custom-filter-chains.nft << EXO
## The firewall4 input, forward and output chains are registered with
## priority filter (0).

## Uncomment the chains below if you want to stage rules *before* the
## default firewall input, forward and output chains.
set mccset {
	type ipv4_addr
	flags interval,timeout
}
set mccset6 {
	type ipv6_addr
	flags interval,timeout
}
set mccm {
	type ether_addr
	flags interval,timeout
}
# chain user_pre_input {
#	type filter hook input priority -1; policy accept;
#	tcp dport ssh ct state new log prefix "SSH connection attempt: "
# }
#
# chain user_pre_forward {
#	type filter hook forward priority -1; policy accept;
# }
#
# chain user_pre_output {
#	type filter hook output priority -1; policy accept;
# }


## Uncomment the chains below if you want to stage rules *after* the
## default firewall input, forward and output chains.

# chain user_post_input {
#	type filter hook input priority 1; policy accept;
#	ct state new log prefix "Firewall4 accepted ingress: "
# }
#
chain user_post_forward {
	type filter hook forward priority 1; policy accept;
#	ct state new log prefix "Firewall4 accepted forward: "
	ip daddr @mccset drop
	ip6 daddr @mccset6 drop
	ether saddr @mccm drop
}
#
# chain user_post_output {
#	type filter hook output priority 1; policy accept;
#	ct state new log prefix "Firewall4 accepted egress: "
# }
chain user_dstnat {
	type nat hook prerouting priority dstnat; policy accept;
#	iifname "br-lan" ip daddr {192.168.1.2} tcp dport {80,443} dnat to $(uci get network.lan.ipaddr)
}

chain user_srcnat {
	type nat hook postrouting priority srcnat; policy accept;
#	oifname "lan" ip saddr 192.168.1.0/24 snat to xxx
#	oifname "lan" ip saddr 192.168.1.0/24 masquerade
}
EXO
exit 0 
