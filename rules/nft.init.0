#!/bin/sh

	mdd='mccset' # local 'fccset'
	mddm='mccm'
	mangle='fw4' # local 'filter'
function list4(){
	nft list set inet $1 $2
}
function list6(){
        nft list set inet $mangle "${mdd}6"
}
function add(){
	case "$1" in
		add )
			nft add element inet $mangle $mdd {"$2"}
			list4 $mangle $mdd
			;;
		add6 )
			nft add element inet $mangle "${mdd}6" {"$2"}
			list6
			;;
		addt )
			nft add element inet $mangle $mdd {"$2" timeout $3}
			list4 $mangle $mdd
			;;
		addm )
			nft add element inet $mangle $mddm { "$2" }
			list4 $mangle $mddm
			;;
		addmt )
			nft add element inet $mangle $mddm { "$2" timeout $3 }
			list4 $mangle $mddm
			;;
	esac
}
function del(){
	case "$1" in
		del )
			nft delete element inet $mangle $mdd {"$2"}
			list4 $mangle $mdd
			;;
		del6 )
			nft delete element inet $mangle "${mdd}6" {"$2"}
			list6
			;;
		delm )
			nft delete element inet $mangle $mddm {"$2"}
			list4 $mangle $mddm
			;;
	esac
}
case "$1" in
	add | add6 )
		add $1 $2
		;;
	del | del6 )
		del $1 $2
		;;
	addm )
		add $1 $2
		;;
        addt |addmt )
                add $1 $2 $3
                ;;
	delm )
		del $1 $2
		;;
esac
unset mdd mddm mangle

if [ "$1" == "init" ];then

	nft flush ruleset
	na='prerouting'
	nb='input'
	nc='forward'
	nd='output'
	ne='postrouting'
	raw='raw'
	nat='nat'
	filter='filter'
	mangle='mangle'
	pa=-300
	pb=-100
	pc=0
	pd=-150

function nta(){
	nft add table inet $1
}
nta $raw
nta $nat
nta $filter
nta $mangle
function nch(){
	nft add chain inet $1 $2 { type $3 hook $4 priority $5 \; policy accept \; }
}
nch $raw $nd $filter $na $pa
nch $raw $ne $filter $na $pa

nch $nat $na $nat $na $pb
nch $nat $nb $nat $nb $pb
nch $nat $nd $nat $nd $pb
nch $nat $ne $nat $ne $pb

nch $filter $nb $filter $nb $pc
nch $filter $nc $filter $nc $pc
nch $filter $nd $filter $nd $pc

nch $mangle $na $filter $na $pd
nch $mangle $nb $filter $nb $pd
nch $mangle $nc $filter $nc $pd
nch $mangle $nd $filter $nd $pd
nch $mangle $ne $filter $ne $pd
function nchn(){
	nft add chain inet $1 $2
}
nchn $filter syn_flood
nft add rule inet $filter syn_flood limit rate 25/second burst 50 packets counter return comment "water"
nft add rule inet $filter syn_flood counter drop comment "drop_flood"
nchn $filter faa
nchn $filter fbb
nchn $filter fcc

nchn $mangle maa
nchn $mangle mbb
nchn $mangle mcc
nchn $mangle mdd
nchn $mangle mee
function nru(){
	nft add rule inet $1 $2 counter jump $3
}
nru $filter $nb faa
nru $filter $nc fbb
nru $filter $nd fcc

nru $mangle $na maa
nru $mangle $nb mbb
nru $mangle $nc mcc
nru $mangle $nd mdd
nru $mangle $ne mee

function nset(){
	nft add set inet ${1} ${2} { type ipv4_addr \;flags interval,timeout \; counter \; auto-merge \;}
	nft add set inet ${1} "${2}6" { type ipv6_addr \;flags interval,timeout \; counter \; auto-merge \;}
}
function p_nset(){
	nft add set inet ${1} ${2} { type ipv4_addr . inet_service \;flags interval,timeout \; counter \; auto-merge \;}
}
p_nset $mangle maaset
p_nset $mangle mbbset
p_nset $mangle mccset
p_nset $mangle mddset
p_nset $mangle meeset
nset $filter faaset
nset $filter fbbset
nset $filter fccset
function nsetru(){
	nft add rule inet ${1} ${2} ip daddr @${3} drop
	nft add rule inet ${1} ${2} ip6 daddr @"${3}6" drop
}
function p_nset_ru(){
	nft add rule inet ${1} ${2} ip saddr . tcp dport @${3} drop
}
p_nset_ru $mangle maa maaset
p_nset_ru $mangle mbb mbbset
p_nset_ru $mangle mcc mccset
p_nset_ru $mangle mdd mddset
p_nset_ru $mangle mee meeset
nsetru $filter faa faaset
nsetru $filter fbb fbbset
nsetru $filter fcc fccset

function nmapmac(){
	nft add map inet ${1} ${2} { type ether_addr : verdict \; flags interval,timeout \; counter \;}
}
nmapmac $filter faamap
nmapmac $filter fbbmap
nmapmac $filter fccmap
function nmapmacru(){
	nft add rule inet ${1} ${2} ether saddr vmap @${3}
}
nmapmacru $filter faa faamap
nmapmacru $filter fbb fbbmap
nmapmacru $filter fcc fccmap
unset na nb nc nd ne raw nat filter mangle pa pb pc pd
nft list ruleset
fi
